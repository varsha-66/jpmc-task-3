From 45d0b54cf75c189191496abf10ecfb06f82ddaf0 Mon Sep 17 00:00:00 2001
From: varsha-66 <varsha.maddika@gmail.com>
Date: Tue, 3 Jan 2023 10:18:58 +0530
Subject: [PATCH] Create Patch file

---
 server.py              |  4 ++--
 src/DataManipulator.ts | 51 +++++++++++++++++++++++++++++++++---------
 src/DataStreamer.ts    |  2 +-
 src/Graph.tsx          | 41 ++++++++++++++++++++++++---------
 4 files changed, 73 insertions(+), 25 deletions(-)

diff --git a/server.py b/server.py
index 2de4e28..1d59866 100644
--- a/server.py
+++ b/server.py
@@ -202,7 +202,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 8085):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
@@ -215,7 +215,7 @@ def run(routes, host = '0.0.0.0', port = 8080):
     thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print ('HTTP server started on port 8080')
+    print ('HTTP server started on port 8085')
     while True:
         from time import sleep
         sleep(1)
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index 7f62295..1235e7d 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,49 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  // stock: string,
+  // top_ask_price: number,
+  // timestamp: Date,
+  //updating row interface to match the new schema
+  //necessary because it determines the structure of the object returned by the generateRow function
+ 
+  price_abc: number,
+  price_def: number,
+  ratio: number,
   timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]) {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
-  }
+  // static generateRow(serverResponds: ServerRespond[]) {
+  //   return serverResponds.map((el: any) => {
+  //     return {
+  //       stock: el.stock,
+  //       top_ask_price: el.top_ask && el.top_ask.price || 0,
+  //       timestamp: el.timestamp,
+  //     };
+  //   })
+  // }
+  //update the generateRow function of the DataManipulator class to properly process raw server data
+  // compute price_abc and price_def,ratio using both prices,set lower and upper bounds, and determine trigger_alert
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
+    const ratio = priceABC / priceDEF;
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
+    return {
+        price_abc: priceABC,
+        price_def: priceDEF,
+        ratio,
+        timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ?
+            serverRespond[0].timestamp : serverRespond[1].timestamp,
+        upper_bound: upperBound,
+        lower_bound: lowerBound,
+        trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
+    };
+}
 }
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 9d9eca7..b9e8319 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -10,7 +10,7 @@ export interface ServerRespond {
 }
 
 class DataStreamer {
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:8085/query?id=1';
 
   static getData(callback: (data: ServerRespond[]) => void): void {
     const request = new XMLHttpRequest();
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 277797d..c06b42e 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,5 +1,5 @@
 import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
+import { Table, TableData } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import { DataManipulator } from './DataManipulator';
 import './Graph.css';
@@ -23,10 +23,20 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      // stock: 'string',
+      // top_ask_price: 'float',
+      // top_bid_price: 'float',
+      // timestamp: 'date',
+      //modifying the schema object which configures the Perspective table view of our graph
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float',
+      //price_abc and price_def to calculte the ratio,to track upper_bound, lower_bound, and the moment when these bounds are crossed i.e. trigger_alert
+      //to track with respect to time;timestamp field
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -34,25 +44,34 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
+      //adding more attributes
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
+      //elem.setAttribute('column-pivots', '["stock"]');
+      //removed column- pivots since focus is onratios between the two stocks and not their separate prices
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio","lower_bound","upper_bound","trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        // stock: 'distinctcount',
+        // top_ask_price: 'avg',
+        // top_bid_price: 'avg',
+        // timestamp: 'distinct count',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ] as unknown as TableData);
     }
   }
 }
-- 
2.36.1.windows.1

